const webpack = require('webpack')
const MFS = require('memory-fs')
const path = require('path')
const clientConfig = require('../build/webpack.client')
const serverConfig = require('../build/webpack.server')

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {
    throw e
  }
}

module.exports = (app, cb) => {
  let bundle, clientManifest, resolve
  const ready = (...args) => {
    resolve()
    cb(...args)
  }

  const readyPromise = new Promise(r => { resolve = r })
  clientConfig.entry.app = ['webpack-hot-middleware/client?reload=true', clientConfig.entry.app]

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  })
  app.use(devMiddleware)
  clientCompiler.hooks.done.tap('DevPlugin', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return

    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    if (bundle) {
      ready({
        bundle,
        clientManifest
      })
    }
  })
  
  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000, reload: true }))

  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    if (clientManifest) {
      ready({
        bundle,
        clientManifest
      })
    }
  })

  return readyPromise
}